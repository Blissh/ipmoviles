---
import Icon from "astro-icon";
import { t } from "i18next";
import sendGrid from "@sendgrid/mail";

sendGrid.setApiKey(import.meta.env.SENDGRID_API_KEY);
console.log(import.meta.env.SENDGRID_API_KEY);
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    console.log(data);
    const name = data.get("name");
    const email = data.get("email");
    const phone = data.get("phone");
    const message = data.get("message");
    // TODO: Do not forget to do validation and error handling over received data from your contact form.
    // Sending email
    const msg = {
      to: "ipmovilesdev@gmail.com",
      from: "ipmovilesdev@gmail.com",
      replyTo: { email: email, name: name },
      subject: `Contact form submission from ${name}`,
      text: `
Subject: Contacto de ${name}

Hello,

You have received a new inquiry from a potential customer. Here are the details:

Name: ${name}
Email: ${email}
Phone: ${phone}
Message:${message}

Please follow up with them to provide the atention they need. Building strong customer relationships is key to our success.

Best regards,
IP Moviles
`,
    };
    await sendGrid
      .send(msg)
      .then(() => {
        console.log("Email sent");
      })
      .catch((error) => {
        console.error(error);
      });
  } catch (error) {
    console.error(error);
  }
}
---

<form action="" method="POST" class="contact-form">
  <div class="content">
    <div class="left">
      <div class="input">
        <label for="name">{t("contact_us.form.name")}</label>
        <input
          type="text"
          name="name"
          placeholder={t("contact_us.form.place_name")}
          required
        />
      </div>
      <div class="input">
        <label for="email">{t("contact_us.form.email")}</label>
        <input
          type="email"
          name="email"
          placeholder={t("contact_us.form.place_email")}
          required
        />
      </div>
      <div class="input">
        <label for="phone">{t("contact_us.form.phone")}</label>
        <input
          type="number"
          name="phone"
          placeholder={t("contact_us.form.place_phone")}
          required
        />
      </div>
    </div>
    <div class="right">
      <div class="input">
        <label for="message">{t("contact_us.form.message")}</label>
        <textarea
          name="message"
          id="message"
          cols="30"
          rows="10"
          required
          placeholder={t("contact_us.form.place_message")}></textarea>
      </div>
    </div>
  </div>
  <button type="submit">
    {t("contact_us.form.send_button")}
    <Icon name="mdi:send" />
  </button>
</form>

<style lang="scss">
  @use "../assets/scss/base/_breakpoint.scss" as *;
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 25px;

    > .content {
      display: flex;
      flex-direction: column;

      @include breakpoint(md) {
        flex-direction: row;
        align-items: flex-start;
        gap: 20px;
      }
      > .left {
        display: flex;
        flex-direction: column;
        gap: 20px;
        width: 100%;
        > .input {
          display: flex;
          flex-direction: column;
          gap: 5px;
          width: 100%;
          > input {
            width: 100%;
            height: 40px;
            padding: 10px;
            border-radius: var(--radius-default);
            border: none;
            background-color: var(--color-light-silver);
          }
        }
      }

      > .right {
        display: flex;
        flex-direction: column;
        gap: 20px;
        width: 100%;

        > .input {
          display: flex;
          flex-direction: column;
          gap: 5px;
          width: 100%;
          height: 90%;
          > textarea {
            width: 100%;
            padding: 10px;
            font-size: 1.4rem;
            border-radius: var(--radius-default);
            border: none;
            background-color: var(--color-light-silver);
            resize: none;
            color: var(--color-rich-black);
            @include breakpoint(md) {
              font-size: 1.6rem;
            }
          }
        }
      }
    }

    > button {
      appearance: none;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      border-radius: var(--radius-default);
      background-color: var(--button-background-color);
      color: var(--color-mint-cream);
      border: none;
      padding: 10px;
      font-size: 1.4rem;
      cursor: pointer;
      @include breakpoint(md) {
        align-self: center;
        width: 50%;
      }
      @include breakpoint(lg) {
        font-size: 1.6rem;
      }
      > [astro-icon] {
        width: 20px;
        height: 20px;
      }
    }
  }
</style>
