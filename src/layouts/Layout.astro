---
import "../assets/scss/globals.scss";
import Footer from "../components/Footer/Footer.astro";
import Navbar from "../components/Navbar/Navbar.jsx";
import i18next, { t } from "i18next";
import { localizePath } from "astro-i18next";
import { NextUIProvider } from "@nextui-org/system";
import { LanguageSelector } from "astro-i18next/components";
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang={i18next.language} dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="In IPMoviles we are dedicated to providing high-quality services and cutting-edge cloud solutions while strictly adhering to industry regulations, Forming strong strategic alliances with industry leaders"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <meta name="author" content="IPmoviles" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <!-- MetaComponent -->
    <!-- <meta name="generator" content={Astro.generator} /> -->
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net" />
    <link
      href="https://fonts.bunny.net/css?family=raleway:300,400,500,600,700|rubik:300,400,500,600,700&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
  </head>

  <body>
    <NextUIProvider>
      <Navbar
        home={t("navbar.home")}
        homeRef={localizePath("/")}
        about={t("navbar.about")}
        aboutRef={localizePath("/about")}
        services={t("navbar.services")}
        servicesRef={localizePath("/services")}
        contact={t("navbar.contact")}
        contactRef={localizePath("/contact")}
        gallery={t("navbar.gallery")}
        galleryRef={localizePath("/gallery")}
        client:visible
      >
        <LanguageSelector slot="languageSelect" class={"lang-switch"}/>
      </Navbar>
      <main id="main-content">
        <slot />
      </main>
      <Footer />
    </NextUIProvider>
  </body>

  <script is:inline>
    let darkMode = localStorage.getItem("darkMode");
    const darkModeToggle = document.querySelector(".darkmode-toggle");

    // functions
    const enableDarkMode = (store = true) => {
      document.body.classList.add("darkmode", "dark");
      darkModeToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" width="32" height="32" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M13 3a1 1 0 1 0-2 0v1a1 1 0 1 0 2 0V3zM5.707 4.293a1 1 0 0 0-1.414 1.414l1 1a1 1 0 0 0 1.414-1.414l-1-1zm14 0a1 1 0 0 0-1.414 0l-1 1a1 1 0 0 0 1.414 1.414l1-1a1 1 0 0 0 0-1.414zM12 7a5 5 0 1 0 0 10 5 5 0 0 0 0-10zm-9 4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2H3zm17 0a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2h-1zM6.707 18.707a1 1 0 1 0-1.414-1.414l-1 1a1 1 0 1 0 1.414 1.414l1-1zm12-1.414a1 1 0 0 0-1.414 1.414l1 1a1 1 0 0 0 1.414-1.414l-1-1zM13 20a1 1 0 1 0-2 0v1a1 1 0 1 0 2 0v-1z" fill="currentColor"/></svg>`;
      darkModeToggle.setAttribute("aria-pressed", "true");
      darkModeToggle.setAttribute("aria-label", "Disable dark mode");
      if (store) localStorage.setItem("darkMode", "enabled");
    };

    const disableDarkMode = (store = true) => {
      document.body.classList.remove("darkmode", "dark");
      darkModeToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M9.353 3C5.849 4.408 3 7.463 3 11.47A9.53 9.53 0 0 0 12.53 21c4.007 0 7.062-2.849 8.47-6.353C8.17 17.065 8.14 8.14 9.353 3z"/></svg>`;
      darkModeToggle.setAttribute("aria-pressed", "false");
      darkModeToggle.setAttribute("aria-label", "Enable dark mode");
      if (store) localStorage.setItem("darkMode", "disabled");
    };

    const checkPreference = () => {
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        enableDarkMode(false); // don't set localStorage from preferences to respect future changes in client prefs
      } else {
        disableDarkMode(false);
      }
    };

    // execution
    if (darkMode === "enabled") enableDarkMode();
    if (darkMode === "disabled") disableDarkMode();
    if (!darkMode) checkPreference();

    darkModeToggle.addEventListener("click", () => {
      darkMode = document.body.classList.contains("darkmode");

      !darkMode ? enableDarkMode() : disableDarkMode();
    });
  </script>
  <style lang="scss" is:global>
    :root {
      --radius-default: 10px;
      --font-family-default: "Raleway", sans-serif;
      --font-family-heading: "Rubik", sans-serif;

      // Not overrides
      --navbar-background-color: var(--color-rich-black);
      --navbar-text-color: var(--color-mint-cream);
      --toggle-color: var(--color-white);
      --switch-font-color: var(--color-chinese-black);
      --switch-bg-color: var(--color-mint-cream);
      --grey: var(--color-light-silver);
      --footer-background-color: #0d1f32;
      --contact-section-background: linear-gradient(
        180deg,
        #35aeff 0%,
        #5e63da 100%
      );

      // Light Theme
      --action-color: var(--color-moonstone-dark);
      --action-color-state: var(--color-moonstone-dark);
      --font-color: var(--color-rich-black);
      --second-font-color: var(--color-chinese-black);
      --heading-font-color: var(--color-true-blue);
      --background-color: var(--color-azure);
      --title-color: var(--color-rich-black);
      --hero-background-color: linear-gradient(
        180deg,
        rgba(0, 2, 14, 0.2) 0%,
        rgba(71, 158, 188, 0.2) 47.4%,
        rgba(244, 254, 255, 0.2) 100%
      );
      --theme-color: var(--color-icon-dark);
      --theme-color-state: var(--color-icon-dark-hover);
      --services-card-background: #0b151b;
      --emphasis-color: #006bb9;
      --hero-title: var(--color-rich-black);
      --hero-text-opacity: var(--color-chinese-black);
      --card-background-color: var(--color-true-blue);
      --card-icon-color: #ecebe9;

      --exp-card-background-color: var(--color-true-blue);
      --button-background-color: #0a283d;
    }

    // darkmode overrides
    .darkmode {
      --action-color: var(--color-moonstone);
      --action-color-state: var(--color-moonstone);
      --font-color: var(--color-mint-cream);
      --second-font-color: var(--color-mint-cream);
      --heading-font-color: var(--color-moonstone);
      --background-color: var(--color-chinese-black);
      --title-color: var(--color-moonstone);
      --hero-background-color: radial-gradient(
        100% 100% at 50% 0%,
        rgba(230, 230, 230, 0.2) 0%,
        rgba(2, 118, 183, 0.2) 42.77%,
        rgba(14, 19, 31, 0.2) 100%
      );
      --theme-color: var(--color-icon-light);
      --theme-color-state: var(--color-icon-light-hover);
      --services-card-background: rgba(2, 0, 21, 0.6);
      --emphasis-color: var(--color-moonstone);
      --hero-title: var(--color-moonstone);
      --hero-text-opacity: #bbbfbd;
      --card-background-color: var(--color-blue-saphire);
      --card-icon-color: var(--color-mint-cream);

      --exp-card-background-color: #08283a;
      --button-background-color: #0a77c7;
    }

    body {
      display: flex;
      flex-direction: column;
      color: var(--font-color);
      background-color: var(--background-color);

      main {
        flex: 1 0 auto;
        display: flex;
        flex-direction: column;
        align-items: center;

        h2.section-title {
          color: var(--heading-font-color);
        }

        h1 {
          color: var(--title-color);
        }
      }
    }
  </style>
</html>
