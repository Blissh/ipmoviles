---
import ResponsiveToggle from "../components/ResponsiveToggle.astro";
import { DarkMode } from "accessible-astro-components";
import { Image } from "astro:assets";
import logo from "../assets/Logo.png";
import ContactNavButton from "./ContactNavButton.astro";
import { LanguageSelector } from "astro-i18next/components";



---

<div id="main-navigation" class="is-desktop">
  <div class="container">
    <a href="/">
      <Image src={logo} alt="IP Moviles" width="100" height="30" />
      <!-- <span class="font-bold">Accessible Astro</span> -->
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <!-- Slot for the desktop menu -->
          <slot />
          <LanguageSelector class="lang-switch" />
        </ul>
      </nav>
      <DarkMode />
      <ContactNavButton />
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu dropdown-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
        <LanguageSelector class="lang-switch" />
      </ul>
    </nav>
  </div>
</div>

<script>
  const mainNav = document.querySelector("#main-navigation");
  // const header = document.querySelector("header") as HTMLElement;
  const dropdownMenu = mainNav?.querySelector(".dropdown-menu");

  const setActiveMenuItem = () => {
    const mobileDesktopMenus = mainNav?.querySelectorAll("nav > ul");
    const currentPathname = window.location.pathname;
    console.log(currentPathname);

    mobileDesktopMenus?.forEach((menu) => {
      const menuItems = [
        ...menu.querySelectorAll('a:not([rel*="external"])'),
      ] as HTMLAnchorElement[];
      menuItems.forEach((menuItem) => {
        if (
          currentPathname.includes(menuItem.pathname) &&
          menuItem.textContent !== "Home"
        ) {
          menuItem.classList.add("is-active");
          menuItem.setAttribute("aria-current", "page");
        } else if (menuItem.textContent === "Home" && (currentPathname === "/" || currentPathname === "/es")) {
          menuItem.classList.add("is-active");
          menuItem.setAttribute("aria-current", "page");
        }
      });
    });
  };

  const checkMenuSize = () => {
    const mainNavWidth = mainNav?.getBoundingClientRect().width || 0;
    const widthLimit = 768;
    // const desktopMenuWidth =
    //   document.querySelector(".desktop-menu")?.getBoundingClientRect().width ||
    //   0;

    // const logoWidthBuffer = 300;
    // const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer;

    if (mainNavWidth >= widthLimit) {
      mainNav?.classList.add("is-desktop");
      mainNav?.classList.remove("is-mobile");
      return "desktop";
    } else if (mainNavWidth < widthLimit) {
      mainNav?.classList.add("is-mobile");
      mainNav?.classList.remove("is-desktop");
      return "mobile";
    }
  };

  const isOutOfViewport = (element: HTMLElement) => {
    const elementBounds = element.getBoundingClientRect();

    return (
      elementBounds.right >
      (window.innerWidth || document.documentElement.clientWidth)
    );
  };

  const openDropDownMenu = (dropDownMenu: HTMLElement) => {
    const dropdownList = dropDownMenu.parentNode?.querySelector(
      "ul"
    ) as HTMLElement;
    dropDownMenu.classList.add("show");
    dropDownMenu.setAttribute("aria-expanded", "true");

    if (isOutOfViewport(dropdownList)) {
      dropdownList.style.left = "auto";
    }
  };

  const closeDropDownMenu = (dropDownMenu: HTMLElement) => {
    dropDownMenu.classList.remove("show");
    dropDownMenu.setAttribute("aria-expanded", "false");
  };

  const toggleDropDownMenu = (event: MouseEvent) => {
    const target = event.target as HTMLElement;
    if (target.getAttribute("aria-expanded") === "true") {
      closeDropDownMenu(target);
    } else {
      openDropDownMenu(target);
    }
  };

  // let prevScrollpos = window.scrollY;
  // window.onscroll = () => {
  //   const viewport = checkMenuSize();
  //   console.log(window.scrollY);
  //   if (viewport === "mobile") {
  //     const currentScrollPos = window.scrollY;
  //     if (prevScrollpos > currentScrollPos) {
  //       header.style.top = "0";
  //     } else {
  //       header.style.top = "-74px";
  //     }
  //     prevScrollpos = currentScrollPos;
  //   }
  // };

  dropdownMenu &&
    dropdownMenu.addEventListener("click", () => {
      toggleDropDownMenu;
    });
  setActiveMenuItem();
  checkMenuSize();

  window.addEventListener("resize", checkMenuSize);
</script>

<style lang="scss" is:global>
  @use "../assets/scss/base/_breakpoint.scss" as *;

  header {
    position: sticky;
    top: 0;
    left: 0;
    z-index: 100;
    transition: top 0.3s ease;
    background-color: var(--navbar-background-color);

    //  nav ul.menu li.menu-item a{
    //   color: var(--navbar-text-color);
    //  }
  }

  #main-navigation {
    transition: top 0.3s ease;
    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      padding: 20px;
    }
    @include breakpoint(xl) {
      display: flex;
      justify-content: center;

      .container {
        width: 75%;
        padding: 20px 0px;
      }
    }

    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        position: static;
      }
      nav > ul {
        align-items: center;
      }

      .mobile-menu,
      .menu-cta {
        display: none;
      }

      .darkmode-toggle {
        // margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        visibility: hidden;
        display: none;
      }

      .responsive-toggle {
        display: block;
      }

      .menu-cta {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    nav {
      > ul {
        display: flex;
        gap: 25px;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          font-size: 1.6rem;
          line-height: normal;
          transition: color 0.15s ease-in-out;

          @include breakpoint(lg) {
            font-size: 1.8rem;
          }

          @include breakpoint(xl) {
            font-size: 2rem;
          }
        }

        /* has-dropdown is not used */
        a:hover,
        a:focus,
        .is-active {
          text-decoration: underline;
          text-decoration-thickness: 1px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 20px;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 10px;
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 5px 0;
      }
    }
  }

  .darkmode-toggle {
    padding: 0;
    border: none;
    background-color: inherit;

    svg {
      width: 30px;
      margin-top: 4px;
    }

    svg path {
      fill: var(--theme-color);
      transition: fill 0.2s ease-in-out;
    }

    &:hover {
      svg path {
        fill: var(--theme-color-state);
      }
    }
  }

  .lang-switch {
    appearance: none;
    width: max-content;
    color: var(--switch-font-color);
    background-color: var(--switch-bg-color);
    font-size: 1.6rem;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
  }
</style>
